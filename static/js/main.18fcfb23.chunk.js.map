{"version":3,"sources":["components/header/index.js","pages/main/index.js","pages/country/index.js","services/routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Main","state","countryInfo","filterValue","searchValue","loadCountries","a","async","axios","get","response","dados","data","setState","console","log","name","this","className","value","onChange","handleChange","placeholder","Object","keys","map","country","to","key","alt","src","flag","population","region","capital","Country","nativeName","subregion","topLevelDomain","currencies","languages","borders","props","match","params","api","docs","c","pais","currency","language","bord","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18fcfb23.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nimport './styles.css'\n\nexport default class Header extends Component {\n/*     state = {\n        theme: true\n    }\n    // Preparation to add the Theme Changer\n */\n    render() {\n        return (\n            <header>\n                <h1>Where in the world?</h1>\n                <p>Dark Mode</p>\n            </header>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport axios from 'axios'\n\nimport './styles.css'\n\nexport default class Main extends Component {\n    state = {\n        countryInfo: [],\n        filterValue: 'all',\n        searchValue: ''\n    }\n\n    componentDidMount() {\n        this.loadCountries()\n        // Request the countries\n    }\n\n    loadCountries = async () => {\n        const response = await axios.get('https://restcountries.eu/rest/v2/all')\n\n        const { ...dados } = response.data\n\n        this.setState({ countryInfo: dados })\n\n        console.log(this.state.countryInfo[13].name)\n    }\n\n    handleChange() {\n        return this.state.searchValue\n    }\n\n    render() {\n        const { countryInfo } = this.state\n\n        return (\n            <div className='country-list'>\n                <section className='search-filters'>\n                    <input name='search' value={this.state.searchValue} \n                        onChange={this.handleChange} \n                        placeholder='Search for a country...' />\n\n                    <select name='filter' onChange={this.handleChange}>\n                        <option value='all'>Filter by Region</option>\n                        <option value='africa'>Africa</option>\n                        <option value='america'>America</option>\n                        <option value='asia'>Asia</option>\n                        <option value='europe'>Europe</option>\n                        <option value='oceania'>Oceania</option>\n                    </select>\n                </section>\n\n                <section className='card-list'>\n                {/* Foi necessario transformar objeto em array para iterar */}\n                    {Object.keys(countryInfo).map( country => (\n                    <Link to={`/country/${countryInfo[country].name}`} \n                         key={country} className='country-card' \n                         name={countryInfo[country].name} >\n                        <img alt={`Bandeira ${countryInfo[country].name}`}\n                            src={countryInfo[country].flag} />\n                        <div className='description'>\n                            <h3>{countryInfo[country].name}</h3>\n                            <br />\n                            <strong>Population:</strong>\n                            {countryInfo[country].population} <br />\n                            <strong>Region:</strong>\n                            {countryInfo[country].region} <br />\n                            <strong>Capital:</strong>\n                            {countryInfo[country].capital} <br />\n                        </div>\n                    </Link>\n                    ))}\n                </section>\n\n\n            </div>\n        )\n    }\n\n}\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport api from 'axios'\n\nimport './styles.css'\n\nexport default class Country extends Component {\n    state = {\n        country: [],\n        flag: 'Bandeira',\n        nativeName: '',\n        population: 0,\n        region: '',\n        subregion: '',\n        capital: '',\n        topLevelDomain: [],\n        currencies: [],\n        languages: [],\n        borders: []\n    }\n\n    async componentDidMount() {\n        const { name } = this.props.match.params\n        // gets the prop from main/index.js country clicked\n\n        const response = await api.get(`https://restcountries.eu/rest/v2/name/${name}?fullText=true`)\n        // gets country by the name\n        const { ...docs } = response.data\n\n        this.setState({ country: docs })\n\n        this.setState({\n            flag: docs[0].flag,\n            nativeName: docs[0].nativeName,\n            population: docs[0].population,\n            region: docs[0].region,\n            subregion: docs[0].subregion,\n            capital: docs[0].capital,\n            topLevelDomain: docs[0].topLevelDomain,\n            currencies: docs[0].currencies,\n            languages: docs[0].languages,\n            borders: docs[0].borders\n        })\n    }\n\n    render() {\n        const c = this.state\n        // const { flag } = this.state\n        console.log(c.borders)\n\n        return (\n            <section>\n                <div>\n                    <Link className='back' to='/' >Back</Link>\n                </div>\n                <div className='country-info'>\n                    <img alt={`bandeira ${c.flag}`} src={c.flag} />\n                    <div className='info'>\n                        <h2>{Object.keys(c.country).map( pais => (c.country[pais].name))}</h2>\n                        <div className='country-details'>\n                            <p><strong>Native Name: </strong>\n                                {c.nativeName}</p>\n                            <p><strong>Population: </strong>\n                                {c.population}</p>\n                            <p><strong>Region: </strong>\n                                {c.region}</p>\n                            <p><strong>Sub Region: </strong>\n                                {c.subregion}</p>\n                            <p><strong>Capital: </strong>\n                                {c.capital}</p>\n                            <p><strong>Top Level Domain: </strong>\n                                {c.topLevelDomain}</p>\n                            <p><strong>Currencies: </strong>\n                                {Object.keys(c.currencies).map( currency => (c.currencies[currency].name))}</p>\n                            <p><strong>Languages: </strong>\n                                {Object.keys(c.languages).map( language => (c.languages[language].name + ' '))}</p>\n                        </div>\n                        <div className='border-button'>\n                            <strong>Border Countries: </strong>\n                            {Object.keys(c.borders).map( bord => (\n                                <Link className='btn' key={bord} to={`/`}> \n                                    {c.borders[bord]}\n                                </Link>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </section>\n        )\n    }\n}","import React from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Main from '../pages/main/'\nimport Country from '../pages/country/'\n\nconst Routes = () => (\n    /* Call routes as a browser  -- BrowserRouter */\n    <BrowserRouter>\n        {/* Makes only one route to be called -- Switch */}\n        <Switch>\n            {/* defines components to show in each route -- Route */}\n            <Route exact path='/' component={Main} />\n            {/* show country info (by name)*/}\n            <Route path='/country/:name' component={Country} />\n        </Switch>\n    </BrowserRouter>\n)\n\nexport default Routes","import React from 'react';\n\nimport './App.css'\n\nimport Header from './components/header'\nimport Routes from './services/routes'\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Routes />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}